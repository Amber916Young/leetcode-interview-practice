package Tree;

import java.util.*;

/**
 * @ClassName:countHighestScoreNodes
 * @Auther: yyj
 * @Description: https://leetcode.com/problems/count-nodes-with-the-highest-score/
 * @Date: 01/11/2022 21:22
 * @Version: v1.0
 */
public class countHighestScoreNodes {

    public static void main(String[] args) {
        countHighestScoreNodes test = new countHighestScoreNodes();
        test.countHighestScoreNodes(new int[]{-1,921,47,1031,1163,388,437,1474,1339,123,1586,1373,553,725,1516,1138,546,549,240,1232,465,531,1480,540,915,51,443,1451,315,123,1171,1340,109,726,77,870,1183,1217,570,759,719,155,1054,851,273,747,178,740,1464,130,840,1280,670,1340,1038,1337,692,1105,52,534,1278,1388,210,389,86,344,1085,1459,639,1384,175,1551,665,839,503,184,766,117,1234,1326,1298,1299,1351,896,646,1418,678,731,457,18,544,1424,1015,1528,920,675,526,1273,900,1498,1154,71,1079,1128,514,1541,464,1403,391,197,1226,670,358,311,497,723,1371,1107,25,1198,619,1152,150,908,868,84,478,91,1280,1039,867,1080,38,1231,303,1577,1123,1136,881,866,1342,249,399,827,804,1526,399,1570,904,1253,816,1100,175,933,1359,1294,177,461,742,266,1021,1277,1144,1332,1486,1112,969,826,942,312,1456,1302,1444,583,1241,1485,490,820,300,1575,1260,811,669,487,1562,692,647,874,363,791,1238,334,161,473,1352,1222,323,590,1511,277,894,1080,822,56,876,1097,543,682,505,787,398,843,410,386,1060,614,321,535,20,1485,759,24,733,1271,1310,439,1043,1320,86,1418,1569,493,1007,573,1345,729,765,170,584,1197,1357,352,753,1183,1567,970,593,199,1235,1549,1489,1362,1387,1567,730,987,480,1509,1468,226,811,1291,205,1130,632,1206,719,1560,1389,777,1503,88,1319,162,1564,1588,906,786,1216,1415,284,1137,1149,1372,720,664,943,820,259,1435,1279,1188,1244,1065,305,211,1382,1217,229,423,1460,423,1405,641,1309,77,550,693,232,1146,1149,526,514,1132,1318,549,446,633,259,271,254,920,1281,257,94,510,418,989,931,1289,1012,1515,979,34,457,578,1401,10,189,1013,403,1315,774,327,929,969,1187,1306,530,1572,966,1232,770,249,305,288,207,476,713,79,971,785,1216,1099,1523,1428,575,164,327,927,392,1490,995,619,580,1098,1536,153,736,35,1445,575,897,429,1383,138,1005,74,341,980,186,390,1503,1271,552,589,181,184,268,295,308,1497,219,63,152,1420,707,1410,1119,715,1151,129,23,677,1291,665,1162,1566,271,957,340,614,1400,915,1210,310,1309,282,131,615,1460,1029,1203,644,848,492,779,754,728,597,42,668,480,1431,1043,40,1409,1429,307,494,519,352,1453,1520,725,1052,1374,0,1184,104,1046,1174,847,766,1215,208,1515,720,227,812,145,972,137,1091,61,1555,277,444,297,182,1249,922,470,1316,946,658,1552,1346,1260,197,776,761,649,1499,662,466,686,1085,46,28,191,1249,653,1519,122,489,468,178,96,1131,841,754,1028,66,471,793,957,1074,1242,381,1082,1324,1108,1420,1243,431,1323,432,1431,975,1211,268,961,221,97,763,953,595,1381,1311,298,562,414,1396,251,1034,991,1295,1066,904,1022,1097,227,386,105,783,1337,1534,1441,42,143,850,1073,1456,940,485,601,810,1526,1276,192,844,26,1336,1230,32,295,1373,636,1173,501,48,576,150,1211,911,656,840,1212,139,88,496,1067,1405,201,693,690,128,1059,90,1356,1196,641,36,378,495,710,809,1327,1305,559,1452,93,265,1510,338,1173,31,1444,1196,1513,118,1285,1164,798,761,746,523,546,1213,1251,1024,929,1300,479,1213,1204,1371,116,708,120,1502,923,1093,1000,803,1443,1404,1450,226,1345,356,1393,1079,771,708,1465,765,1329,1447,495,512,786,331,852,17,29,701,1007,660,862,898,49,301,1023,408,1510,209,991,449,49,1290,830,1443,1442,1466,317,1266,656,319,1363,924,413,338,53,499,235,37,465,343,8,336,1317,1359,533,1522,1540,1167,1030,687,563,279,494,1397,566,315,1473,946,1061,618,1508,1516,962,975,1508,999,1228,836,854,1189,1277,1415,38,467,344,11,730,146,792,1546,518,582,232,1145,346,1257,253,547,1423,818,298,984,483,119,1119,92,1093,1448,244,1525,936,317,1579,1179,1028,1541,1187,1568,1193,142,1144,1311,324,979,780,286,885,144,429,568,971,193,537,398,510,50,111,1172,751,1207,516,590,1384,897,221,676,1052,220,1214,300,1169,1554,598,28,397,1393,1170,99,1364,1475,320,10,1090,1034,421,926,771,556,1407,984,654,1214,144,472,948,1283,608,1159,565,260,55,544,781,963,1582,1205,597,723,1153,539,663,172,166,418,467,858,1002,1152,430,1138,1151,1302,55,986,871,593,1074,1531,678,1297,70,587,334,21,976,634,109,1248,1407,237,724,85,689,1086,589,726,1354,1026,1367,1262,567,1248,192,1167,681,1159,247,368,1032,1263,626,72,750,983,403,1408,37,1141,883,981,812,1296,517,648,1512,454,767,1401,756,1098,1033,636,903,996,257,852,774,215,153,318,866,284,1264,193,1126,53,1513,1430,170,908,145,853,195,1323,405,620,331,1380,540,732,1409,655,1287,128,406,1469,1318,1209,485,794,669,522,19,565,702,1246,1425,51,361,1514,58,223,1423,1330,407,39,1498,201,698,1136,366,389,1404,914,1114,139,528,287,1046,1222,556,604,297,528,1419,601,1242,713,243,1245,1252,643,1101,387,748,615,479,442,1376,1562,682,448,1339,1032,507,1327,440,972,1559,1542,1295,729,1073,1286,1464,71,1333,743,351,573,460,393,1523,138,1381,1129,1413,625,207,1005,1406,162,922,337,987,385,292,1134,307,1505,683,141,948,161,1011,797,1204,9,933,217,16,577,758,198,1362,121,955,409,830,1568,1288,724,1238,314,1469,740,605,854,112,511,1585,1584,1019,950,1505,1186,1102,147,118,1090,208,21,1059,1087,1455,839,1054,1352,484,1484,1465,817,1147,500,587,73,302,861,995,285,1486,358,1495,1495,1293,361,1272,843,882,1468,982,66,1195,600,1190,1445,345,1174,120,413,819,240,359,220,579,598,1336,1380,867,1099,390,943,1475,873,477,697,602,1203,1126,476,538,1179,856,168,211,251,223,1585,383,63,892,827,1504,101,1294,275,236,357,203,817,688,132,1145,366,1580,121,1476,1091,167,646,799,644,1303,1509,785,1170,181,535,1586,760,382,871,1195,1330,101,500,137,471,907,32,861,1424,853,364,1545,172,75,493,1107,529,1182,69,676,654,1236,715,518,1010,469,119,79,1030,1570,56,1355,244,1190,254,712,1558,1063,1410,1000,186,110,1530,1141,831,960,1356,74,826,816,1583,539,688,1185,1472,1010,290,907,408,1300,360,1094,999,608,1390,1335,1389,628,776,1086,570,1229,1462,616,341,285,491,1039,938,1286,568,1525,234,182,1258,1070,1048,233,633,1290,658,824,1446,963,191,360,1504,660,1363,1413,1022,270,94,1189,148,986,770,1450,1357,1235,780,473,303,1244,299,337,477,1512,1042,503,0,1103,185,563,718,356,662,799,791,637,1576,1322,1058,1355,117,85,393,872,1379,905,1066,1266,1565,229,677,231,1502,1406,1177,960,750,1117,936,148,1172,1479,1287,378,928,301,828,206,253,1419,1366,1192,496,1267,531,430,1399,548,505,353,1454,668,1388,67,99,52,950,586,567,1354,1279,1139,560,373,763,143,804,299,551,683,1191,501,1458,1226,881,1246,1206,1264,923,978,25,1396,689,1215,381,198,397,930,1121,664,760,673,1128,767,643,1095,105,663,13,326,1198,905,134,1094,1478,213,141,1210,1499,554,1308,209,1245,1315,965,1282,882,548,848,1391,103,130,1041,17,1551,304,280,650,1015,778,1358,434,255,795,595,78,756,489,1041,336,73,648,372,1519,805,364,604,1185,547,1397,824,1326,1320,1329,1492,97,78,454,189,1108,970,870,443,717,415,1346,810,1580,618,1316,492,1332,1223,219,499,841,256,649,602,
                134,1474,1014,576,1029,651,1253,194,1202,13,395,314,24,58,657,764,466,1273,50,1236,985,149,111,647,736,989,787,1178,805,1303,199,163,426,980,652,1186,707,1058,586,1335,75,1240,320,484,1181,444,481,441,321,958,1511,1160,171,857,1528,872,746,261,433,543,185,1221,102,319,833,1549,1223,1378,883,1228,216,90,1430,1181,1458,419,862,402,1459,652,942,605,1454,1061,1178,821,1588,1524,1463,1531,1317,686,1040,758,885,1482,39,1258,1288,353,326,1060,1234});

    }

    /**
     * Haven't solved TLE  1 Nov 2022
     *                            0 1 2 3 4
     * @param parents parents = [-1,2,0,2,0]
     * @return
     */
    public int countHighestScoreNodes(int[] parents) {
        Map<Integer,List<Integer>> graph = new HashMap<>();
        for(int i = 0 ;i<parents.length;i++){
            if(parents[i] != -1){
                graph.putIfAbsent(parents[i],new ArrayList<>());
                graph.putIfAbsent(i,new ArrayList<>());
                graph.get(parents[i]).add(i);
                graph.get(i).add(parents[i]);
            }
        }

        HashMap<Integer,Integer> ans = new HashMap<>();
        int max = Integer.MIN_VALUE;
        for(int i = 0 ;i<parents.length;i++){
            List<Integer> tmpList = graph.get(i);
            Set<Integer> visited = new HashSet<>();
            int num = 1;
            if(tmpList.size() == 1){
                num = parents.length -1 ;
            }else {
                for(int n : tmpList){
                    visited = new HashSet<>();
                    TreeDFS(visited,graph,n, i);
                    num *= visited.size();
                }
            }
            max = Math.max(max,num);
            ans.put(num,ans.getOrDefault(num,0)+1);
        }
        return ans.get(max);
    }

    private void TreeDFS(Set<Integer> visited, Map<Integer, List<Integer>> graph, int start,int i) {
        if (visited.contains(start) || !graph.containsKey(start)) return;
        visited.add(start);
        for (int k : graph.get(start)) {
            if (visited.contains(k) || k == i) continue;
            TreeDFS(visited,graph,k, i);
        }
    }
}
